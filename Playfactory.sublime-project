{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"lib",
				".vs",
				"Debug",
				"engine",
			],
		},
		{
			"name": "PigEngine",
			"path": "engine/platform/playdate",
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "build",
			"folder_exclude_patterns":
			[
				".vs",
				"*.pdx",
			],
			"file_exclude_patterns":
			[
				"*.exp",
				"*.map",
				"*.obj",
				"*.ilk",
				"*.manifest",
				"preprocessed_output.txt",
			],
		},
		{
			"path": "C:\\Users\\robbitay\\Documents\\MyStuff\\Programs\\PlaydateSDK",
			"folder_exclude_patterns":
			[
				".sentry-native",
				"bin",
				"Designing for Playdate",
				"Disk",
				"Inside Playdate",
				"PlaydateSDK.docset",
				"resources",
				"C_API/buildsupport",
				"CoreLibs/assets",
			],
			"file_exclude_patterns":
			[
				"*.html",
				"*.css",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[			"AllocAlignment_16Bytes",
			"AllocAlignment_4Bytes",
			"AllocAlignment_64Bytes",
			"AllocAlignment_8Bytes",
			"AllocAlignment_Max",
			"AllocAlignment_None",
			"AppState_MainMenu",
			"BUTTON_FONT_PATH",
			"DBG_FILEPATH_AND_FUNCNAME_SEP_CHAR",
			"DEFAULT_PROCESS_LOG_FIFO_SIZE",
			"DEFAULT_WORLD_SEED",
			"DEFAULT_WORLD_SIZE",
			"GAME_MAX_NUM_PARTICLES",
			"GAME_VIEW_MOVE_LAG_WHILE_MOVING",
			"GAME_VIEW_MOVE_LAG_WHILE_STOPPED",
			"GAME_VIEW_MOVE_SPEED",
			"GAME_VIEW_SCREEN_EDGE_PADDING",
			"GAME_VIEW_STOP_MOVE_DIST_TO_TARGET",
			"GAME_VIEW_VEL_BASED_LOOK_AHEAD_DIST",
			"GY_MAX_FLOAT_PARSE_LENGTH",
			"INV_BORDER_THICKNESS",
			"INV_ITEM_SIZE",
			"INV_PADDING",
			"INV_SCROLL_CRANK_HINT_INACTIVE_DISPLAY_TIME",
			"INV_SLOT_GROW_BIG_ANIM_TIME",
			"INV_SLOT_LARGE_SIZE",
			"INV_SLOT_MARGIN",
			"INV_SLOT_SIZE",
			"INV_TOOL_BTN_SIZE",
			"ITEM_COUNT_FONT_PATH",
			"InvButton_Combine",
			"InvButton_None",
			"InvButton_NumButtons",
			"InvSlotType_Button",
			"InvSlotType_Default",
			"InvSlotType_NumTypes",
			"InvSlotType_ToolBtn",
			"InvType_None",
			"InvType_NumTypes",
			"InvType_PlayerInventory",
			"InvType_PlayerScience",
			"InvType_SmallBox",
			"ItemId_Apple",
			"ItemId_ApplePie",
			"ItemId_Cake",
			"ItemId_CandiedFruit",
			"ItemId_CandyCane",
			"ItemId_Cookie",
			"ItemId_CottonCandy",
			"ItemId_Donut",
			"ItemId_Dough",
			"ItemId_Fruit",
			"ItemId_FruitCake",
			"ItemId_FruitGum",
			"ItemId_Gum",
			"ItemId_Gumball",
			"ItemId_Ice",
			"ItemId_Jam",
			"ItemId_Jello",
			"ItemId_Mining",
			"ItemId_Mint",
			"ItemId_None",
			"ItemId_NumIds",
			"ItemId_PowderSugar",
			"ItemId_Sugar",
			"LCD_COLUMNS",
			"LCD_ROWS",
			"MAX_NUM_COLLISIONS_PER_FRAME",
			"MMENU_BTN_HORIZONTAL_PADDING",
			"MMENU_BTN_SPACING",
			"MMENU_BTN_VERTICAL_PADDING",
			"MMenuAction_Exit",
			"MMenuAction_None",
			"MMenuAction_NumActions",
			"MMenuAction_Play",
			"MMenuAction_Settings",
			"MemArenaType_Alias",
			"MemArenaType_Buffer",
			"MemArenaType_FixedHeap",
			"MemArenaType_MarkedStack",
			"MemArenaType_None",
			"MemArenaType_PagedHeap",
			"MemArenaType_PagedStack",
			"MemArenaType_Redirect",
			"MemArenaType_StdHeap",
			"MemArenaType_VirtualStack",
			"MyStr_Empty",
			"MyStr_Empty_Const",
			"PLAYER_COLLISION_REC",
			"PLAYER_DOUBLE_TAP_RUN_TIMEOUT",
			"PLAYER_FRICTION",
			"PLAYER_INV_SIZE",
			"PLAYER_MINING_SPEED",
			"PLAYER_RUN_SPEED",
			"PLAYER_SIZE",
			"PLAYER_STOP_RUN_TIMEOUT",
			"PLAYER_TARGET_DIST",
			"PLAYER_TARGET_OFFSET",
			"PLAYER_WALK_SPEED",
			"ParsingTokenType_Comment",
			"ParsingTokenType_FilePrefix",
			"ParsingTokenType_KeyValuePair",
			"ParsingTokenType_NumTypes",
			"ParsingTokenType_Unknown",
			"PartFlag_Alive",
			"PartFlag_All",
			"PartFlag_None",
			"PartFlag_NumFlags",
			"PartFlag_ShowNumber",
			"PartLayer_All",
			"PartLayer_High",
			"PartLayer_HighUi",
			"PartLayer_Low",
			"PartLayer_LowUi",
			"PartLayer_None",
			"PartLayer_NumLayers",
			"RECIPE_BOOK_PATH",
			"Range_Empty",
			"Range_One",
			"Rangei_Empty",
			"Rangei_One",
			"SMALL_BOX_INV_SIZE",
			"STACK_MAX",
			"TILE_SIZE",
			"TileType_Dough",
			"TileType_Fruit",
			"TileType_Grass",
			"TileType_Mint",
			"TileType_None",
			"TileType_NumTiles",
			"TileType_Sugar",
			"TryDeserRecipeBookError_CouldntOpenFile",
			"TryDeserRecipeBookError_EmptyFile",
			"TryDeserRecipeBookError_MissingOrCorruptHeader",
			"TryDeserRecipeBookError_None",
			"TryDeserRecipeBookError_NumErrors",
			"TryParseFailureReason_CharactersAfterParenthesis",
			"TryParseFailureReason_FloatParseFailure",
			"TryParseFailureReason_Infinity",
			"TryParseFailureReason_InvalidCharacter",
			"TryParseFailureReason_InvalidType",
			"TryParseFailureReason_InvalidUtf8",
			"TryParseFailureReason_MismatchedParenthesis",
			"TryParseFailureReason_NoNumbers",
			"TryParseFailureReason_None",
			"TryParseFailureReason_NotEnoughCommas",
			"TryParseFailureReason_Nullptr",
			"TryParseFailureReason_NumReasons",
			"TryParseFailureReason_Overflow",
			"TryParseFailureReason_StringOverflow",
			"TryParseFailureReason_TooLong",
			"TryParseFailureReason_TooManyCommas",
			"TryParseFailureReason_TooShort",
			"TryParseFailureReason_Underflow",
			"TryParseFailureReason_UnknownString",
			"TryParseFailureReason_WrongNumCharacters",
			"WORLD_GEN_CANDY_DENSITY",
			"WORLD_GEN_GRASS_DENSITY",
			"WordBreakCharClass_AlphabeticLower",
			"WordBreakCharClass_AlphabeticUpper",
			"WordBreakCharClass_NumClasses",
			"WordBreakCharClass_Numeric",
			"WordBreakCharClass_Other",
			"WordBreakCharClass_Punctuation",
			"WordBreakCharClass_PunctuationClose",
			"WordBreakCharClass_PunctuationOpen",
			"WordBreakCharClass_Whitespace",
			"WordBreakCharClass_WordPunctuation",
			"XmlParseResultType_Comment",
			"XmlParseResultType_Contents",
			"XmlParseResultType_Directive",
			"XmlParseResultType_EndToken",
			"XmlParseResultType_Error",
			"XmlParseResultType_None",
			"XmlParseResultType_NumTypes",
			"XmlParseResultType_Token",
			"XmlParsingError_ClosingTokenMismatch",
			"XmlParsingError_ExpectedClosingAngleBracket",
			"XmlParsingError_InvalidCharInIdentifier",
			"XmlParsingError_InvalidCharacterOutsideToken",
			"XmlParsingError_InvalidPropertyFirstChar",
			"XmlParsingError_InvalidUtf8",
			"XmlParsingError_MissingClosingTokens",
			"XmlParsingError_MissingPropertyValue",
			"XmlParsingError_NoEqualsForProperty",
			"XmlParsingError_NoTypeFoundForToken",
			"XmlParsingError_None",
			"XmlParsingError_NumErrors",
			"XmlParsingError_UnexpectedClosingToken",
			"XmlParsingError_UnexpectedEol",
			"ryDeserRecipeBookError_MissingOrCorruptHeader",
		],
		"custom_functions":
		[			"#define AddInvSlot(type, groupId, gridPos, position)",
			"#define AddInvSlotSimple(groupId, gridPos)",
			"#define AllocArray(arena, structName, numItems)",
			"#define AllocBytes(arena, numBytes)",
			"#define AllocChars(arena, numBytes)",
			"#define AllocString(arena, strPntr)",
			"#define AllocStruct(arena, structName)",
			"#define ArenaDelete(type, pntr, arena)",
			"#define ArenaNew(type, pntrToAssign, arena, ...)",
			"#define AssertNullTerm(strPntr)",
			"#define AssertNullTerm_(strPntr)",
			"#define CreateStackBufferArena(arenaName, bufferName, size)",
			"#define FreeBufferArena(bufferArena, sourceArena)",
			"#define FreeString(arena, strPntr)",
			"#define GY_STRING_FIFO_PUSH_LINES_AFTER_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_BEFORE_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_SORT_CALLBACK_DEF(functionName)",
			"#define GetFifoLineMetaStruct(linePntr, type)",
			"#define HardFreeMem(arena, allocPntr)",
			"#define HardReallocMem(arena, allocPntr, newSize)",
			"#define InPlaceNew(type, pntrToClass, ...)",
			"#define IsAllocPrefixFilled(packedSize)",
			"#define LogExitFailure(log, errorCode)",
			"#define LogExitSuccess(log)",
			"#define LogPrintAt(log, level, formatString, ...)",
			"#define LogPrintAtx(log, level, flags, formatString, ...)",
			"#define LogPrintLineAt(log, level, formatString, ...)",
			"#define LogPrintLineAtx(log, level, flags, formatString, ...)",
			"#define LogPrintLine_D(log, formatString, ...)",
			"#define LogPrintLine_Dx(log, flags, formatString, ...)",
			"#define LogPrintLine_E(log, formatString, ...)",
			"#define LogPrintLine_Ex(log, flags, formatString, ...)",
			"#define LogPrintLine_I(log, formatString, ...)",
			"#define LogPrintLine_Ix(log, flags, formatString, ...)",
			"#define LogPrintLine_N(log, formatString, ...)",
			"#define LogPrintLine_Nx(log, flags, formatString, ...)",
			"#define LogPrintLine_O(log, formatString, ...)",
			"#define LogPrintLine_Ox(log, flags, formatString, ...)",
			"#define LogPrintLine_R(log, formatString, ...)",
			"#define LogPrintLine_Rx(log, flags, formatString, ...)",
			"#define LogPrintLine_W(log, formatString, ...)",
			"#define LogPrintLine_Wx(log, flags, formatString, ...)",
			"#define LogPrint_D(log, formatString, ...)",
			"#define LogPrint_Dx(log, flags, formatString, ...)",
			"#define LogPrint_E(log, formatString, ...)",
			"#define LogPrint_Ex(log, flags, formatString, ...)",
			"#define LogPrint_I(log, formatString, ...)",
			"#define LogPrint_Ix(log, flags, formatString, ...)",
			"#define LogPrint_N(log, formatString, ...)",
			"#define LogPrint_Nx(log, flags, formatString, ...)",
			"#define LogPrint_O(log, formatString, ...)",
			"#define LogPrint_Ox(log, flags, formatString, ...)",
			"#define LogPrint_R(log, formatString, ...)",
			"#define LogPrint_Rx(log, flags, formatString, ...)",
			"#define LogPrint_W(log, formatString, ...)",
			"#define LogPrint_Wx(log, flags, formatString, ...)",
			"#define LogWriteAt(log, level, message)",
			"#define LogWriteAtx(log, level, flags, message)",
			"#define LogWriteLineAt(log, level, message)",
			"#define LogWriteLineAtx(log, level, flags, message)",
			"#define LogWriteLine_D(log, message)",
			"#define LogWriteLine_Dx(log, flags, message)",
			"#define LogWriteLine_E(log, message)",
			"#define LogWriteLine_Ex(log, flags, message)",
			"#define LogWriteLine_I(log, message)",
			"#define LogWriteLine_Ix(log, flags, message)",
			"#define LogWriteLine_N(log, message)",
			"#define LogWriteLine_Nx(log, flags, message)",
			"#define LogWriteLine_O(log, message)",
			"#define LogWriteLine_Ox(log, flags, message)",
			"#define LogWriteLine_R(log, message)",
			"#define LogWriteLine_Rx(log, flags, message)",
			"#define LogWriteLine_W(log, message)",
			"#define LogWriteLine_Wx(log, flags, message)",
			"#define LogWrite_D(log, message)",
			"#define LogWrite_Dx(log, flags, message)",
			"#define LogWrite_E(log, message)",
			"#define LogWrite_Ex(log, flags, message)",
			"#define LogWrite_I(log, message)",
			"#define LogWrite_Ix(log, flags, message)",
			"#define LogWrite_N(log, message)",
			"#define LogWrite_Nx(log, flags, message)",
			"#define LogWrite_O(log, message)",
			"#define LogWrite_Ox(log, flags, message)",
			"#define LogWrite_R(log, message)",
			"#define LogWrite_Rx(log, flags, message)",
			"#define LogWrite_W(log, message)",
			"#define LogWrite_Wx(log, flags, message)",
			"#define NewStringInArena(arena, length, charPntr)",
			"#define NewStringInArenaNt(arena, nullTermStr)",
			"#define NotEmptyStr(strPntr)",
			"#define NotEmptyStr_(strPntr)",
			"#define NotNullStr(strPntr)",
			"#define NotNullStr_(strPntr)",
			"#define PackAllocPrefixSize(used, size)",
			"#define PrintInArenaVa(arena, resultName, resultLengthName, formatString)",
			"#define SoftFreeMem(arena, allocPntr)",
			"#define SoftReallocMem(arena, allocPntr, newSize)",
			"#define TIME_SCALED_ANIM(animTimeMs, timeScale)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define TwoPassAddSlotLoop()",
			"#define TwoPassAddSlotLoopEnd()",
			"#define UnpackAllocPrefixSize(packedSize)",
			"#define VarArrayAdd(array, type)",
			"#define VarArrayAddRange(array, index, newItemsCount, type)",
			"#define VarArrayContains(array, itemPntr)",
			"#define VarArrayContainsTyped(array, itemPntr, type)",
			"#define VarArrayGet(array, index, type)",
			"#define VarArrayGetFirst(array, type)",
			"#define VarArrayGetFirstHard(array, type)",
			"#define VarArrayGetFirstSoft(array, type)",
			"#define VarArrayGetHard(array, index, type)",
			"#define VarArrayGetIndexOf(array, itemPntr, indexOutPntr, type)",
			"#define VarArrayGetLast(array, type)",
			"#define VarArrayGetLastHard(array, type)",
			"#define VarArrayGetLastSoft(array, type)",
			"#define VarArrayGetSoft(array, index, type)",
			"#define VarArrayInsert(array, index, type)",
			"#define VarArrayLoop(arrayPntr, indexName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, index)",
			"#define VarArrayMerge(destArray, sourceArray)",
			"#define VarArrayPop(array, type)",
			"#define VarArrayPopFront(array, type)",
			"#define VarArrayPush(array, type)",
			"#define VarArrayPushFront(array, type)",
			"#define VarArrayRemove(array, index, type)",
			"#define VarArrayRemoveByPntr(array, itemToRemove)",
			"#define VarArrayRemoveByPntrTyped(array, itemToRemove, type)",
			"#define VarArrayRemoveRange(array, index, numItemsToRemove, type)",
			"BitmapData_t GetBitmapData(LCDBitmap* bitmap, bool sizeOnly = false)",
			"Dir2Ex_t Dir2ExFromDir2Flags(u8 dirFlags)",
			"Font_t* PdBindFont(Font_t* font)",
			"InvSlot_t* GetInvSlotAtGridPos(Inventory_t* inventory, v2i gridPos)",
			"InvSlot_t* GetInvSlotMaxOrMinInCol(Inventory_t* inventory, i32 column, bool findMax)",
			"InvSlot_t* GetInvSlotMaxOrMinInRow(Inventory_t* inventory, i32 row, bool findMax)",
			"InvSlot_t* GetInvSlotsForInvType(InvType_t type, MemArena_t* memArena, u64* numSlotsOut)",
			"InvSlot_t* InvMoveSelection(Inventory_t* inventory, InvSlot_t* selectedSlot, Dir2_t direction)",
			"ItemStack_t GetTileTypeDrop(TileType_t type)",
			"ItemStack_t NewItemStack(ItemId_t id, u8 count)",
			"LCDBitmapDrawMode PdSetDrawMode(LCDBitmapDrawMode drawMode)",
			"LineParser_t NewLineParser(MyStr_t fileContents)",
			"MMenuBtn_t* AddButtonMainMenu(MMenuAction_t action, MyStr_t displayText)",
			"MemArena_t AllocBufferArena(MemArena_t* sourceArena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"MyStr_t CombineStrs(MemArena_t* memArena, MyStr_t str1, MyStr_t str2)",
			"MyStr_t ConvertUcs2StrToUtf8(MemArena_t* memArena, const wchar_t* wideStrPntr, u64 wideStrLength)",
			"MyStr_t ConvertUcs2StrToUtf8Nt(MemArena_t* memArena, const wchar_t* nullTermWideStr)",
			"MyStr_t FindStrParensPart(MyStr_t target, char openParensChar = '[', char closeParensChar = ']')",
			"MyStr_t FormatBytes(u64 numBytes, MemArena_t* memArena)",
			"MyStr_t FormatMilliseconds(u64 milliseconds, MemArena_t* memArena)",
			"MyStr_t FormatRealTime(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t GetDirectoryPart(MyStr_t filePath)",
			"MyStr_t GetFifoLineMetaString(const StringFifoLine_t* line)",
			"MyStr_t GetFifoLineText(const StringFifoLine_t* line)",
			"MyStr_t GetFileNamePart(MyStr_t filePath, bool includeExtension = true)",
			"MyStr_t NewStr(u64 length, char* pntr)",
			"MyStr_t NewStrLengthOnly(u64 length)",
			"MyStr_t PrintInArenaStr(MemArena_t* arena, const char* formatString, ...)",
			"MyStr_t StrReplace(MyStr_t str, MyStr_t target, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSplice(MyStr_t target, u64 startIndex, u64 endIndex, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSubstring(MyStr_t* target, u64 startIndex, u64 endIndex)",
			"MyStr_t StrSubstringLength(MyStr_t* target, u64 startIndex, u64 length)",
			"MyStr_t StringRepeat(MemArena_t* memArena, MyStr_t str, u64 numRepetitions)",
			"MyStr_t UnescapeQuotedStringInArena(MemArena_t* memArena, MyStr_t target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"MyStr_t* SplitString(MemArena_t* memArena, MyStr_t target, MyStr_t delineator, u64* numPiecesOut = nullptr, bool ignoreCase = false)",
			"MyWideStr_t ConvertUtf8StrToUcs2(MemArena_t* memArena, MyStr_t utf8Str)",
			"Particle_t* TryAllocParticle(ParticleSystem_t* system)",
			"Particle_t* TrySpawnParticle(ParticleSystem_t* system, PartLayer_t layer, v2 startPos, v2 velocity, SpriteSheet_t* sheet, v2i frame, r32 lifeSpan)",
			"Range_t NewEmptyRange(r32 value)",
			"Range_t NewRange(r32 min, r32 max)",
			"Range_t RangeBoth(Range_t range1, Range_t range2)",
			"Range_t RangeOverlap(Range_t range1, Range_t range2)",
			"Range_t RangeScale(Range_t range, r32 scalar)",
			"Range_t RangeShift(Range_t range, r32 shiftAmount)",
			"Rangei_t NewEmptyRangei(i32 value)",
			"Rangei_t NewRangei(i32 min, i32 max)",
			"Rangei_t RangeiBoth(Rangei_t range1, Rangei_t range2)",
			"Rangei_t RangeiOverlap(Rangei_t range1, Rangei_t range2)",
			"Rangei_t RangeiScale(Rangei_t range, i32 scalar)",
			"Rangei_t RangeiShift(Rangei_t range, i32 shiftAmount)",
			"Recipe_t NewRecipe(ItemId_t item1, ItemId_t item2, ItemId_t output)",
			"Recipe_t* AddRecipeToBook(RecipeBook_t* book, const Recipe_t* recipe)",
			"Recipe_t* FindRecipeInBook(RecipeBook_t* book, ItemId_t item1, ItemId_t item2, bool respectOrder = false)",
			"Recipe_t* FindRecipeInBookById(RecipeBook_t* book, u64 recipeId)",
			"SpriteSheet_t LoadSpriteSheet(MyStr_t path, i32 numFramesX)",
			"StringFifoLine_t* StringFifoPushLine(StringFifo_t* fifo, MyStr_t text)",
			"StringFifoLine_t* StringFifoPushLineExt(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"TextParser_t NewTextParser(MyStr_t fileContents)",
			"Texture_t CreateTexture(v2i size, u64 dataSize, const u8* pixelData, const u8* maskData)",
			"Uuid_t ParseUuid(MyStr_t str)",
			"WordBreakCharClass_t GetWordBreakCharClass(u32 codepoint)",
			"WorldTile_t* GetWorldTileAt(World_t* world, v2i tilePos)",
			"XmlParser_t NewXmlParser(MemArena_t* arenaForLists, MyStr_t fileContents)",
			"XmlProperty_t* GetXmlProperty(XmlToken_t* token, MyStr_t propertyKey, bool ignoreCase = false)",
			"bool BufferIsNullTerminated(u64 bufferSize, const char* bufferPntr)",
			"bool DoRangeisOverlap(Rangei_t range1, Rangei_t range2, bool inclusive = true)",
			"bool DoRangesOverlap(Range_t range1, Range_t range2, bool inclusive = true)",
			"bool DoesMemArenaSupportFreeing(MemArena_t* arena)",
			"bool DoesMemArenaSupportPushAndPop(MemArena_t* arena)",
			"bool DoesRangeContain(Range_t range, r32 value, bool inclusiveMin = true, bool inclusiveMax = true)",
			"bool DoesRangeiContain(Rangei_t range, i32 value, bool inclusiveMin = true, bool inclusiveMax = true)",
			"bool DoesStrContainMultibyteUtf8Characters(MyStr_t str)",
			"bool FindNextCharInStr(MyStr_t target, u64 startIndex, MyStr_t searchCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextUnknownCharInStr(MyStr_t target, u64 startIndex, MyStr_t knownCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextWhitespaceInStr(MyStr_t target, u64 startIndex, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindSubstring(MyStr_t target, MyStr_t substring, u64* indexOut = nullptr, bool ignoreCase = false, u64 startIndex = 0)",
			"bool FreeMem(MemArena_t* arena, void* allocPntr, u64 allocSize = 0, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"bool IsAlignedTo(const void* memoryPntr, AllocAlignment_t alignment)",
			"bool IsCharPairWordBreak(u32 prevCodepoint, u32 nextCodepoint, bool forward, bool subwords)",
			"bool IsEmptyStr(MyStr_t target)",
			"bool IsInitialized(const StringFifo_t* stringFifo)",
			"bool IsNullStr(MyStr_t target)",
			"bool IsPntrInsideRange(const void* testPntr, const void* rangeBase, u64 rangeSize, bool inclusive = false)",
			"bool IsSolidWorldTileAt(World_t* world, v2i tilePos)",
			"bool IsStrNullTerminated(MyStr_t target)",
			"bool IsStringValidIdentifier(MyStr_t str, bool allowUnderscores = true, bool allowNumbers = true, bool allowLeadingNumbers = false, bool allowEmpty = false, bool allowSpaces = false)",
			"bool IsTileTypeSolid(TileType_t type)",
			"bool LineParserGetLine(LineParser_t* parser, MyStr_t* lineOut)",
			"bool MemArenaVerify(MemArena_t* arena, bool assertOnFailure = false)",
			"bool ReadEntireFile(bool fromDataDir, MyStr_t path, MyStr_t* contentsOut, MemArena_t* memArena)",
			"bool StrEndsWith(MyStr_t str, MyStr_t suffix, bool ignoreCase = false)",
			"bool StrEndsWithSlash(MyStr_t str)",
			"bool StrEquals(MyStr_t target, MyStr_t comparison)",
			"bool StrEqualsIgnoreCase(MyStr_t target, MyStr_t comparison)",
			"bool StrStartsWith(MyStr_t str, MyStr_t prefix, bool ignoreCase = false)",
			"bool StrStartsWithSlash(MyStr_t str)",
			"bool TextParserGetToken(TextParser_t* parser, ParsingToken_t* tokenOut)",
			"bool TryDeserRecipeBook(MyStr_t fileContents, ProcessLog_t* log, RecipeBook_t* bookOut, MemArena_t* memArena, bool isInclude = false)",
			"bool TryLoadAllRecipes(RecipeBook_t* bookOut, MemArena_t* memArena)",
			"bool TryLoadRecipeBook(bool fromDataDir, MyStr_t filePath, ProcessLog_t* log, RecipeBook_t* bookOut, MemArena_t* memArena)",
			"bool TryParseBitfieldEnum(MyStr_t str, enum_t* valueOut, enum_t enumCount, GetEnumStr_f* getEnumStrFunc, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseBool(MyStr_t str, bool* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseColor(MyStr_t str, Color_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool alphaAtBeginning = true)",
			"bool TryParseDir2(MyStr_t str, Dir2_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseDir3(MyStr_t str, Dir3_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseEnum(MyStr_t str, enum_t* valueOut, enum_t enumCount, GetEnumStr_f* getEnumStrFunc, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseI16(MyStr_t str, i16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI32(MyStr_t str, i32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI64(MyStr_t str, i64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI8(MyStr_t str, i8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseR32(MyStr_t str, r32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowSuffix = true, bool allowInfinity = false)",
			"bool TryParseR64(MyStr_t str, r64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowInfinity = false)",
			"bool TryParseReci(MyStr_t str, reci* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseU16(MyStr_t str, u16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU32(MyStr_t str, u32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU64(MyStr_t str, u64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU8(MyStr_t str, u8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseUuid(MyStr_t str, Uuid_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseV2(MyStr_t str, v2* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseV2i(MyStr_t str, v2i* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool UpdateAnimationDown(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationDownTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool UpdateAnimationUp(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationUpTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool VarArrayExpand(VarArray_t* array, u64 capacityRequired)",
			"bool XmlParserCheckIdentifierHasValidChars(XmlParser_t* parser, MyStr_t identifierStr, XmlParseResult_t* result, ProcessLog_t* log)",
			"bool XmlParserGetToken(XmlParser_t* parser, XmlParseResult_t* result, ProcessLog_t* log)",
			"char* AllocCharsAndFill(MemArena_t* arena, u64 numChars, const char* dataForFill, bool addNullTerm = true)",
			"char* AllocCharsAndFillNt(MemArena_t* arena, const char* nullTermStr, bool addNullTerm = true)",
			"char* PrintInArena(MemArena_t* arena, const char* formatString, ...)",
			"const char* FormatBytesNt(u64 numBytes, MemArena_t* memArena)",
			"const char* FormatMillisecondsNt(u64 milliseconds, MemArena_t* memArena)",
			"const char* FormatRealTimeNt(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const char* GetFileNamePartNt(const char* filePath)",
			"const char* GetInvButtonDisplayStr(InvButton_t enumValue)",
			"const char* GetInvButtonStr(InvButton_t enumValue)",
			"const char* GetInvSlotTypeStr(InvSlotType_t enumValue)",
			"const char* GetInvTypeStr(InvType_t enumValue)",
			"const char* GetItemIdDisplayStr(ItemId_t enumValue)",
			"const char* GetItemIdStr(ItemId_t enumValue)",
			"const char* GetMMenuActionStr(MMenuAction_t enumValue)",
			"const char* GetMemArenaTypeStr(MemArenaType_t arenaType)",
			"const char* GetPDLanguageStr(PDLanguage language)",
			"const char* GetPDSystemEventStr(PDSystemEvent event)",
			"const char* GetParsingTokenTypeStr(ParsingTokenType_t enumValue)",
			"const char* GetPartFlagStr(PartFlag_t enumValue)",
			"const char* GetPartLayerStr(PartLayer_t enumValue)",
			"const char* GetTileTypeStr(TileType_t enumValue)",
			"const char* GetTryDeserRecipeBookErrorStr(TryDeserRecipeBookError_t enumValue)",
			"const char* GetTryParseFailureReasonStr(TryParseFailureReason_t reason)",
			"const char* GetWordBreakCharClassStr(WordBreakCharClass_t enumValue)",
			"const char* GetXmlParseResultTypeStr(XmlParseResultType_t enumValue)",
			"const char* GetXmlParsingErrorStr(XmlParsingError_t error)",
			"const void* GetFifoLineEndPntr(const StringFifoLine_t* line)",
			"i32 StrCompareIgnoreCase(MyStr_t str1, MyStr_t str2)",
			"inline bool BasicallyBetweenR32(r32 value, r32 min, r32 max, r32 tolerance = 0.001f)",
			"inline bool BasicallyBetweenR64(r64 value, r64 min, r64 max, r64 tolerance = 0.001)",
			"inline bool BasicallyEqualR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyEqualR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BasicallyGreaterThanR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyGreaterThanR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BasicallyLessThanR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyLessThanR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BtnChanged(Btn_t btn)",
			"inline bool BtnChangedRaw(Btn_t btn)",
			"inline bool BtnDown(Btn_t btn)",
			"inline bool BtnDownRaw(Btn_t btn)",
			"inline bool BtnPressed(Btn_t btn)",
			"inline bool BtnPressedRaw(Btn_t btn)",
			"inline bool BtnReleased(Btn_t btn)",
			"inline bool BtnReleasedRaw(Btn_t btn)",
			"inline bool CrankMoved()",
			"inline bool CrankMovedRaw()",
			"inline bool IsCrankDocked()",
			"inline bool IsCrankDockedRaw()",
			"inline bool IsCrankUndocked()",
			"inline bool WasBtnHandled(Btn_t btn)",
			"inline bool WasCrankDeltaHandled()",
			"inline r32 InverseLerpR32(r32 start, r32 end, r32 value, bool clamp = false)",
			"inline r64 InverseLerpR64(r64 start, r64 end, r64 value, bool clamp = false)",
			"inline void HandleBtn(Btn_t btn)",
			"inline void HandleBtnExtended(Btn_t btn)",
			"inline void HandleCrankDelta()",
			"inline void HandleCrankDocked()",
			"inline void HandleCrankDockedExtended()",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"r32 Animate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 AnimateAndPauseBy(u64 timeSource, r32 min, r32 max, u64 animationTime, u64 pauseTime, u64 offset = 0)",
			"r32 AnimateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 InverseLerpRange(Range_t range, r32 value, bool clamp = false)",
			"r32 Oscillate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"reci PlaydateCrankHintBubble(bool doRender, bool pointRight, r32 scale, v2i targetPos)",
			"u64 AnimateAndPauseByU64(u64 timeSource, u64 min, u64 max, u64 animationTime, u64 pauseTime, u64 offset = 0, bool useFirstFrameForPause = false)",
			"u64 AnimateByU64(u64 timeSource, u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 AnimateU64(u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 FindNextWordBreakInString(MyStr_t str, u64 startIndex, bool forward, bool subwords, bool includeBreakAtStartIndex = false)",
			"u64 FnvHashStr(MyStr_t str)",
			"u64 GetFifoLineMetaSize(const StringFifoLine_t* line)",
			"u64 GetFifoLineTotalSize(const StringFifoLine_t* line)",
			"u64 GetNumMarks(MemArena_t* arena)",
			"u64 GetStringFifoHeadIndex(const StringFifo_t* fifo)",
			"u64 GetStringFifoPntrIndex(const StringFifo_t* fifo, const void* pntr)",
			"u64 GetStringFifoTailIndex(const StringFifo_t* fifo)",
			"u64 GrowMemQuery(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, GrowMemToken_t* tokenOut = nullptr)",
			"u64 PushMemMark(MemArena_t* arena)",
			"u64 StrReplaceInPlace(MyStr_t str, MyStr_t target, MyStr_t replacement, bool ignoreCase = false)",
			"u64 TimeSince(u64 programTimeSnapshot)",
			"u64 TrimLeadingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimTrailingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 UnescapeQuotedStringInPlace(MyStr_t* target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"u8 Dir2FlagsFromDir2Ex(Dir2Ex_t dir2ex)",
			"u8 GetCodepointForUtf8Str(MyStr_t str, u64 index, u32* codepointOut = nullptr)",
			"u8 OffsetToAlign(const void* memoryPntr, AllocAlignment_t alignment)",
			"u8 TryAddItemStackToInventory(Inventory_t* inventory, ItemStack_t stack)",
			"v2 ClampGameViewToWorld(v2 position, v2 viewSize, v2i worldSize)",
			"v2 ResolveWorldTileCollisions(World_t* world, rec colRec)",
			"v2 ToVec2(Dir2Ex_t dir2ex)",
			"v2i GetBitmapSize(LCDBitmap* bitmap)",
			"v2i GetItemIdFrame(ItemId_t id)",
			"v2i GetTileTypeFrame(TileType_t type, v2i tilePos)",
			"v2i MeasureText(LCDFont* font, MyStr_t text, i32 tracking = 0)",
			"void AppDebugOutput(u8 flags, const char* filePath, u64 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* message)",
			"void AppDebugPrint(u8 flags, const char* filePath, u64 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* formatString, ...)",
			"void ClearMemArena(MemArena_t* arena)",
			"void CopyStringFifo(StringFifo_t* destFifo, const StringFifo_t* srcFifo, MemArena_t* memArena, bool shrinkBufferToMatchContents)",
			"void CreateProcessLog(ProcessLog_t* logOut, u64 fifoSize, MemArena_t* fifoArena, MemArena_t* logArena)",
			"void CreateProcessLogStub(ProcessLog_t* logOut)",
			"void CreateStringFifo(StringFifo_t* fifo, u64 bufferSize, u8* bufferPntr)",
			"void CreateStringFifoInArena(StringFifo_t* fifo, MemArena_t* memArena, u64 bufferSize)",
			"void CreateVarArray(VarArray_t* array, MemArena_t* memArena, u64 itemSize, u64 initialRequiredCapacity = 0, bool exponentialChunkSize = true, u64 allocChunkSize = 8)",
			"void DestroyStringFifo(StringFifo_t* fifo)",
			"void DumpProcessLog(const ProcessLog_t* log, const char* headerAndFooterStr = nullptr, DbgLevel_t minLevel = DbgLevel_Debug)",
			"void FreeInventory(Inventory_t* inventory)",
			"void FreeMemArena(MemArena_t* arena)",
			"void FreePlayer(Player_t* player)",
			"void FreeProcessLog(ProcessLog_t* log)",
			"void FreeRecipeBook(RecipeBook_t* book)",
			"void FreeVarArray(VarArray_t* array)",
			"void FreeWorld(World_t* world)",
			"void FreeXmlParser(XmlParser_t* parser)",
			"void GameViewUpdateWorldRec(GameView_t* view)",
			"void GrowMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize, const GrowMemToken_t* token)",
			"void InitGameView(GameView_t* view, v2 startPos, v2i worldSize)",
			"void InitInventory(Inventory_t* inventory, MemArena_t* memArena, InvType_t type)",
			"void InitMemArena_Alias(MemArena_t* arena, MemArena_t* sourceArena)",
			"void InitMemArena_Buffer(MemArena_t* arena, u64 bufferSize, void* bufferPntr, bool singleAlloc = false, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_FixedHeap(MemArena_t* arena, u64 size, void* memoryPntr, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_MarkedStack(MemArena_t* arena, u64 size, void* memoryPntr, u64 maxNumMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapArena(MemArena_t* arena, u64 pageSize, MemArena_t* sourceArena, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapFuncs(MemArena_t* arena, u64 pageSize, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_Redirect(MemArena_t* arena, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc)",
			"void InitMemArena_StdHeap(MemArena_t* arena)",
			"void InitParticleSystem(ParticleSystem_t* system, MemArena_t* memArena, u64 maxNumParts)",
			"void InitPlayer(Player_t* player, MemArena_t* memArena, v2 startPos)",
			"void InitRecipeBook(RecipeBook_t* book, MemArena_t* memArena, u64 numRecipesExpected = 0)",
			"void InitWorld(World_t* world, MemArena_t* memArena, v2i size, u64 seed)",
			"void InitializeAppInput()",
			"void LogExit_(ProcessLog_t* log, bool success, u32 errorCode, const char* filePath, u32 lineNumber, const char* funcName)",
			"void LogOutput_(ProcessLog_t* log, u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* message)",
			"void LogPrint_(ProcessLog_t* log, u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* formatString, ...)",
			"void OnOpenInventory(Inventory_t* inventory, bool scrollView)",
			"void ParticleSetDisplayNumber(Particle_t* part, Font_t* font, i64 displayNumber)",
			"void PdBeginFrame()",
			"void PdDrawLine(v2i start, v2i end, i32 width, LCDColor color = kColorBlack)",
			"void PdDrawRec(reci drawRec, LCDColor color = kColorBlack)",
			"void PdDrawRecOutline(reci drawRec, i32 thickness, bool outside = false, LCDColor color = kColorBlack)",
			"void PdDrawRecOutlineArc(reci rectangle, i32 thickness, r32 startPercent, r32 endPercent, LCDColor color)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, reci drawRec)",
			"void PdDrawText(MyStr_t text, v2i position)",
			"void PdDrawTextPrint(v2i position, const char* formatString, ...)",
			"void PdDrawTexturedRec(Texture_t texture, reci drawRec)",
			"void PdSetRenderOffset(v2i offset)",
			"void PlaceButtonsListMainMenu()",
			"void PopMemMark(MemArena_t* arena, u64 mark = 0xFFFFFFFFFFFFFFFFULL)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void RangeFix(Range_t* range)",
			"void RangeiFix(Rangei_t* range)",
			"void RenderInventorySlot(InvSlot_t* slot, reci slotRec)",
			"void RenderInventoryUi(Inventory_t* inventory)",
			"void RenderParticleSystem(ParticleSystem_t* system, u8 layers = PartLayer_All)",
			"void RenderPlayer(Player_t* player)",
			"void RenderWorld(World_t* world, const Player_t* player)",
			"void SetProcessLogFilePath(ProcessLog_t* log, MyStr_t filePath)",
			"void SetProcessLogName(ProcessLog_t* log, MyStr_t processName)",
			"void ShrinkMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize)",
			"void SplitFilePath(MyStr_t fullPath, MyStr_t* directoryOut, MyStr_t* fileNameOut, MyStr_t* extensionOut = nullptr)",
			"void StartAppState_MainMenu(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StopAppState_MainMenu(bool deinitialize, AppState_t nextState)",
			"void StrReallocAppend(MyStr_t* baseStr, MyStr_t appendStr, MemArena_t* memArena)",
			"void StrSpliceInPlace(MyStr_t target, u64 startIndex, MyStr_t replacement)",
			"void StringFifoAddBuildBuffer(StringFifo_t* fifo, u64 buildBufferSize, u8* buildSpace)",
			"void StringFifoAddBuildBufferInArena(StringFifo_t* fifo, u64 buildBufferSize, MemArena_t* memArena)",
			"void StringFifoBuild(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoBuildEx(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoInsertLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, StringFifoPushLineSort_f* sortCallback, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void StringFifoPopLine(StringFifo_t* fifo)",
			"void StringFifoPushLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void UpdateAppInput()",
			"void UpdateAppInputBtnState(Btn_t btn, bool isDown)",
			"void UpdateAppState_MainMenu()",
			"void UpdateGameView(GameView_t* view, v2 playerPos, v2 playerInputVec, v2i worldSize)",
			"void UpdateInventory(Inventory_t* inventory, Inventory_t* otherInventory)",
			"void UpdateParticleSystem(ParticleSystem_t* system)",
			"void UpdatePlayer(Player_t* player, World_t* world)",
			"void UpdateWorld(World_t* world)",
			"void VarArrayAddVarArray(VarArray_t* destArray, const VarArray_t* sourceArray, u64 destIndex, u64 sourceIndex = 0, u64 sourceCount = UINT64_MAX)",
			"void VarArrayClear(VarArray_t* array, bool deallocate = false)",
			"void VarArrayCopy(VarArray_t* destArray, const VarArray_t* sourceArray, MemArena_t* memArena)",
			"void VarArrayName(VarArray_t* array, MyStr_t newName)",
			"void VarArraySort(VarArray_t* array, CompareFunc_f* compareFunc, void* contextPntr)",
			"void* AllocMem(MemArena_t* arena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"void* GetFifoLineMetaStruct_(StringFifoLine_t* line, u64 expectedStructSize)",
			"void* ReallocMem(MemArena_t* arena, void* allocPntr, u64 newSize, u64 oldSize = 0, AllocAlignment_t alignOverride = AllocAlignment_None, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"void* VarArrayMove(VarArray_t* array, u64 fromIndex, u64 toIndex, bool swapWithTarget = true)",
		],
		"custom_globals":
		[			"ElapsedMs",
			"ProgramTime",
			"ScreenSize",
			"ScreenSizef",
			"TimeScale",
			"boundFont",
			"currentDrawMode",
			"fixedHeap",
			"input",
			"logGlobals",
			"mainHeap",
			"mmenu",
			"pd",
			"pig",
		],
		"custom_types":
		[			"AllocAlignment_t",
			"AllocationFunction_f",
			"BitmapData_t",
			"FreeFunction_f",
			"GameView_t",
			"GetPreciseProgramTime_f",
			"GetThreadNumber_f",
			"HeapAllocPrefix_t",
			"HeapPageHeader_t",
			"InvButton_t",
			"InvSlotType_t",
			"InvSlot_t",
			"InvType_t",
			"Inventory_t",
			"ItemId_t",
			"ItemStack_t",
			"LineParser_t",
			"LogGlobals_t",
			"MMenuAction_t",
			"MMenuBtn_t",
			"MainMenuState_t",
			"MarkedStackArenaHeader_t",
			"MemArenaType_t",
			"MemArena_t",
			"MyStr_t",
			"MyWideStr_t",
			"ParsingTokenType_t",
			"ParsingToken_t",
			"PartFlag_t",
			"PartLayer_t",
			"ParticleSystem_t",
			"Particle_t",
			"Pentagon_t",
			"Player_t",
			"ProcessLogLine_t",
			"ProcessLog_t",
			"Range_t",
			"Rangei_t",
			"RecipeBook_t",
			"Recipe_t",
			"StringFifoLine_t",
			"StringFifoPushLineAfter_f",
			"StringFifoPushLineBefore_f",
			"StringFifoPushLineSort_f",
			"StringFifo_t",
			"TextParser_t",
			"TileType_t",
			"TryDeserRecipeBookError_t",
			"TryParseFailureReason_t",
			"WordBreakCharClass_t",
			"WorldTile_t",
			"World_t",
			"XmlParseResultType_t",
			"XmlParseResult_t",
			"XmlParser_t",
			"XmlParsingError_t",
			"XmlProperty_t",
			"XmlToken_t",
		],
	},
}
